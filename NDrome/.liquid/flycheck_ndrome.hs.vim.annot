5:1-5:11::Main.splitDrome :: "[GHC.Types.Char] -> ([GHC.Types.Char], [GHC.Types.Char])"
5:12-5:16::line :: "[GHC.Types.Char]"
5:24-5:25::x :: "[GHC.Types.Char]"
5:26-5:27::y :: "[GHC.Types.Char]"
5:33-5:40::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> [[GHC.Types.Char]]"
5:41-5:44::lq_anf__d1vC :: "{v : [GHC.Types.Char] | null v <=> false && len v >= 0}"
5:45-5:49::line :: "{v : [GHC.Types.Char] | v == line && len v >= 0}"
6:19-6:25::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"
6:20-6:21::x :: "{v : [GHC.Types.Char] | v == x && len v >= 0}"
6:23-6:24::y :: "{v : [GHC.Types.Char] | v == y && len v >= 0}"
9:1-9:10::Main.dromeTest :: "([GHC.Types.Char], [GHC.Types.Char]) -> [GHC.Types.Char]"
9:26-9:33::chunked :: "[[GHC.Types.Char]]"
9:36-9:44::_ :: "GHC.Types.Int -> [GHC.Types.Char] -> [[GHC.Types.Char]]"
9:46-9:50::_ :: "[GHC.Types.Char] -> GHC.Types.Int"
9:51-9:52::n :: "{v : [GHC.Types.Char] | v == n && len v >= 0}"
9:54-9:57::str :: "{v : [GHC.Types.Char] | v == str && len v >= 0}"
10:25-10:32::chunked :: "{v : [[GHC.Types.Char]] | v == chunked && len v >= 0}"
10:33-10:35::_ :: "x1:[[GHC.Types.Char]]\n-> x2:[[GHC.Types.Char]]\n-> {v : GHC.Types.Bool | Prop v <=> x1 == v}"
10:36-10:43::_ :: "x1:[[GHC.Types.Char]] -> {v : [[GHC.Types.Char]] | len v == len x1}"
10:44-10:51::chunked :: "{v : [[GHC.Types.Char]] | v == chunked && len v >= 0}"
11:27-11:31::GHC.CString.unpackCString# :: "GHC.Prim.Addr# -> [GHC.Types.Char]"
12:27-12:31::GHC.CString.unpackCString# :: "GHC.Prim.Addr# -> [GHC.Types.Char]"
15:1-15:11::Main.removeCRLF :: "[GHC.Types.Char] -> [GHC.Types.Char]"
15:12-15:16::line :: "[GHC.Types.Char]"
15:24-15:25::x :: "[GHC.Types.Char]"
15:26-15:27::y :: "[GHC.Types.Char]"
15:31-15:41::_ :: "[GHC.Types.Char] -> ([GHC.Types.Char], [GHC.Types.Char])"
15:42-15:46::line :: "{v : [GHC.Types.Char] | v == line && len v >= 0}"
16:21-16:22::x :: "{v : [GHC.Types.Char] | v == x && len v >= 0}"
16:23-16:25::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
16:26-16:29::lq_anf__d1vQ :: "{v : [GHC.Types.Char] | null v <=> false && len v >= 0}"
16:30-16:32::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
16:33-16:34::y :: "{v : [GHC.Types.Char] | v == y && len v >= 0}"
19:1-19:1::Main.main :: "{v : (GHC.Types.IO ()) | v == Main.main}"
20:3-20:4::f :: "[GHC.Types.Char]"
20:8-20:16::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
20:17-20:34::lq_anf__d1vX :: "{v : [GHC.Types.Char] | len v >= 0}"
21:7-21:13::dromes :: "[[GHC.Types.Char]]"
21:16-21:21::_ :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
21:22-21:23::f :: "{v : [GHC.Types.Char] | v == f && len v >= 0}"
22:7-22:13::tested :: "{v : [[GHC.Types.Char]] | len v == len dromes}"
22:16-22:19::_ :: "([GHC.Types.Char] -> [GHC.Types.Char])\n-> x3:[[GHC.Types.Char]]\n-> {v : [[GHC.Types.Char]] | len v == len x3}"
22:21-22:30::Main.dromeTest :: "([GHC.Types.Char], [GHC.Types.Char]) -> [GHC.Types.Char]"
22:31-22:32::_ :: "(([GHC.Types.Char], [GHC.Types.Char]) -> [GHC.Types.Char])\n-> ([GHC.Types.Char] -> ([GHC.Types.Char], [GHC.Types.Char]))\n-> [GHC.Types.Char]\n-> exists [([GHC.Types.Char], [GHC.Types.Char])].[GHC.Types.Char]"
22:33-22:43::Main.splitDrome :: "[GHC.Types.Char] -> ([GHC.Types.Char], [GHC.Types.Char])"
22:45-22:51::dromes :: "{v : [[GHC.Types.Char]] | v == dromes && len v >= 0}"
23:7-23:13::result :: "{v : [[GHC.Types.Char]] | len v <= len tested}"
23:16-23:23::_ :: "([GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char])\n-> x4:[[GHC.Types.Char]]\n-> x5:[[GHC.Types.Char]]\n-> {v : [[GHC.Types.Char]] | len v <= len x5 && len v <= len x4}"
23:24-23:28::lq_anf__d1w0 :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
23:30-23:33::_ :: "([GHC.Types.Char] -> [GHC.Types.Char])\n-> x3:[[GHC.Types.Char]]\n-> {v : [[GHC.Types.Char]] | len v == len x3}"
23:34-23:44::Main.removeCRLF :: "[GHC.Types.Char] -> [GHC.Types.Char]"
23:45-23:51::dromes :: "{v : [[GHC.Types.Char]] | v == dromes && len v >= 0}"
23:53-23:59::tested :: "{v : [[GHC.Types.Char]] | v == tested && len v == len dromes && len v >= 0}"
24:3-24:12::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> (GHC.Types.IO ())"
24:13-24:21::lq_anf__d1w2 :: "{v : [GHC.Types.Char] | len v >= 0}"
24:22-24:23::_ :: "([GHC.Types.Char] -> (GHC.Types.IO ()))\n-> [GHC.Types.Char] -> (GHC.Types.IO ())"
24:24-24:31::_ :: "[[GHC.Types.Char]] -> [GHC.Types.Char]"
24:32-24:38::result :: "{v : [[GHC.Types.Char]] | v == result && len v >= 0 && len v <= len tested}"